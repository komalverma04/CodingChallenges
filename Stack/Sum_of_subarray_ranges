class Solution {
    int mod = (int)1e9+7;
    vector<int> nextse(vector<int>& arr){
            int n = arr.size();
            vector<int>ans(n,n);
            stack<int>st;
            for(int i = n-1; i>=0; i--){
                while(!st.empty() && arr[st.top()] >= arr[i]){
                    st.pop();
                }
                if(!st.empty())ans[i] = st.top();
                st.push(i);
            }
            return ans;
        }

         vector<int> prevse(vector<int>& arr){
            int n = arr.size();
            vector<int>ans(n,-1);
            stack<int>st;
            for(int i = 0; i < n; i++){
                while(!st.empty() && arr[st.top()] > arr[i]){
                    st.pop();
                }
                if(!st.empty())ans[i] = st.top();
                st.push(i);
            }
            return ans;
        }



        vector<int> nextge(vector<int>& arr){
            int n = arr.size();
            vector<int>ans(n,n);
            stack<int>st;
            for(int i = n-1; i>=0; i--){
                while(!st.empty() && arr[st.top()] <= arr[i]){
                    st.pop();
                }
                if(!st.empty())ans[i] = st.top();
                st.push(i);
            }
            return ans;
        }

         vector<int> prevge(vector<int>& arr){
            int n = arr.size();
            vector<int>ans(n,-1);
            stack<int>st;
            for(int i = 0; i < n; i++){
                while(!st.empty() && arr[st.top()] < arr[i]){
                    st.pop();
                }
                if(!st.empty())ans[i] = st.top();
                st.push(i);
            }
            return ans;
        }
public:
    long long subArrayRanges(vector<int>& arr) {
         int n = arr.size();
        long long sum = 0;
        long long sumMax = 0;
        vector<int>nse = nextse(arr);
        vector<int>pse = prevse(arr);
        vector<int>nge = nextge(arr);
        vector<int>pge = prevge(arr);

         for (int i = 0; i < n; i++) {
            // Contribution as maximum
            sumMax += (long long)(nge[i] - i) * (i - pge[i]) * arr[i];
            // Contribution as minimum
            sum += (long long)(nse[i] - i) * (i - pse[i]) * arr[i];
        }

        return sumMax - sum; // Difference between max and min contributions
    }
};
