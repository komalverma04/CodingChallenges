class Solution {
     vector<int> nextse(vector<int>& arr){
            int n = arr.size();
            vector<int>ans(n,n);
            stack<int>st;
            for(int i = n-1; i>=0; i--){
                while(!st.empty() && arr[st.top()] >= arr[i]){
                    st.pop();
                }
                if(!st.empty())ans[i] = st.top();
                st.push(i);
            }
            return ans;
        }

         vector<int> prevse(vector<int>& arr){
            int n = arr.size();
            vector<int>ans(n,-1);
            stack<int>st;
            for(int i = 0; i < n; i++){
                while(!st.empty() && arr[st.top()] >= arr[i]){
                    st.pop();
                }
                if(!st.empty())ans[i] = st.top();
                st.push(i);
            }
            return ans;
        }

public:
    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();
        int maxi = INT_MIN;
        vector<int>nse = nextse(heights);
        vector<int>pse = prevse(heights);
        for(int i = 0;i<n;i++){
            maxi = max(maxi, heights[i]*(nse[i] - pse[i] - 1));
        }
        return maxi;
    }
};








Optimisation:-
class Solution {
     
public:
    int largestRectangleArea(vector<int>& arr) {
        int n = arr.size();
        int maxi = INT_MIN;
        stack<int>st;
        for(int i = 0; i<n;i++){
            while(!st.empty() && arr[st.top()] > arr[i]){
                int element = arr[st.top()];
                st.pop();
                int nse = i;
                int pse = st.empty() ? -1 : st.top();
                maxi = max(maxi, (element * (nse - pse - 1)));
            }
            st.push(i);
        }
        while(!st.empty()){
            int element = arr[st.top()];
                st.pop();
            int nse = n;
            int pse = st.empty() ? -1 : st.top();
                maxi = max(maxi, (element * (nse - pse - 1))); 
        }
        return maxi;
    }
};
