double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n = nums1.size();
        int m = nums2.size();
        double k=0.00;
       int i=0 ;int j = 0;
        vector<double> temp;
       // int k = 0;
        while(i<n && j<m){
            if(nums1[i]<=nums2[j]){
                k = (double)nums1[i];
                   temp.push_back(k);
                    i++;
                }else if(nums1[i]>nums2[j]){
                    k = (double)nums2[j];
                    temp.push_back(k);
                    j++;
                }
        }
        while(i<n){
            k=(double)nums1[i];
            temp.push_back(k);
            
            i++;
    }
    
        while(j<m){
            k= (double)nums2[j];
            temp.push_back(k);
           
            j++;
    }
       // for(i=0; i<n; i++){
       //     for(j=0; j<m; j++){
       //         if(nums1[i]<nums2[j]){
       //            temp.push_back(nums1[i]);
       //             k++;
       //             i++;
       //         }
       //         else{
       //             temp.push_back(nums2[j]);
       //             k++;
       //             j++;
       //         }
       //     }
            
   //     z = n+m;
   //     if(temp[z]%2==1) 
   //     return temp[((z+1)/2)-1];
   // else return ((float)temp[(z/2)-1]+(float)temp[(z/2)])/2;
   int z = m+n;
   int x =(m+n)/2;
   double ans;
   if(z%2 == 0){
        ans = (temp[(z/2)-1]+temp[(z/2)])/2.0;
        return ans;
   }else{
       ans = temp[x];
       return ans;
   }
    }


Better solution:-
 double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n = nums1.size();
        int m = nums2.size();
        int mn = n+m;
        int ind1 = mn/2;
        int ind2 = ind1 - 1;
        int ind1el = -1;
        int ind2el = -1;
        int i = 0;
        int j = 0; int cnt = 0;
        while(i < n && j < m){
            if(nums1[i] < nums2[j]){
                if(cnt == ind1)ind1el = nums1[i];
                if(cnt == ind2)ind2el = nums1[i];
                cnt++;
                i++;

            }else{
                
            if(cnt == ind1)ind1el = nums2[j];
            if(cnt == ind2)ind2el = nums2[j];
            cnt++;
            j++;
            }
        }
        while(i < n){
                if(cnt == ind1)ind1el = nums1[i];
                if(cnt == ind2)ind2el = nums1[i];
                cnt++;
                i++;
        }
        while(j < m){

            if(cnt == ind1)ind1el = nums2[j];
            if(cnt == ind2)ind2el = nums2[j];
            cnt++;
            j++;
        } double median = 0.00;
        if(mn % 2 == 0){
             median = (ind1el + ind2el)/2.0;
        }else{
             median = (double)ind1el;
        }
        return median;
    }


Optimal solution by binary search:-
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n = nums1.size();
        int m = nums2.size();
        if(n>m )return findMedianSortedArrays(nums2, nums1);
        int low = 0;
        int high = n;
        int left = (n+m+1)/2;
        while(low <= high){
            int mid1 = low + (high - low)/2;
            int mid2 = left - mid1;
            int l1 = INT_MIN;
            int l2 = INT_MIN;
            int r1 = INT_MAX;
            int r2 = INT_MAX;
            if(mid1 < n) r1 = nums1[mid1];
            if(mid2 < m) r2 = nums2[mid2];
            if(mid1 - 1 >= 0)l1 = nums1[mid1 - 1];
            if(mid2 - 1 >= 0)l2 = nums2[mid2 - 1 ];

            if(l1 <= r2 && l2 <= r1){
                // cout<<n+m<<" ";
                // cout<<n+m % 2;operator precedence, n + (m % 2) rather than (n + m) % 2.
                if((n+m) % 2 == 0){
                    double median = (double)(max(l1,l2) + min(r1,r2))/2.0;
                    return median;
                }else{
                    double median = max(l1,l2);
                    return median;
                }
            }else if(l1 > r2){
                high = mid1 - 1;
            }else{
                low = mid1 + 1;
            }
        }
        return 0.0;
    }
};
