lass Solution {
  public:
    int kthElement(vector<int>& arr1, vector<int>& arr2, int k) {
       int i = 0;
       int j = 0;
       int n = arr1.size(); int ans = -1;
       int m = arr2.size(); int cnt = 1;
       while( i<n && j<m){
           if(arr1[i] < arr2[j]){
               if(cnt == k){
                   ans = arr1[i];
                   
               }
               cnt++; i++;
           }else{
               if(cnt == k){
                   ans = arr2[j];
               }
               cnt++; j++;
           }
       }
       while(i < n){
           if(cnt == k){
                   ans = arr1[i];
                   
               }
               cnt++; i++;
       }
       while(j < m){
           if(cnt == k){
                   ans = arr2[j];
               }
               cnt++; j++;
       }
       return ans;
    }
};




Binary Search solution

int kthElement(vector<int>& nums1, vector<int>& nums2, int k) {
       int n = nums1.size();
        int m = nums2.size();
        if(n>m )return kthElement(nums2, nums1,k);
        if((n+m) < k)return -1;
        int low = max(0, k - m);
        int high = min(k,n);
        int left = k;
        while(low <= high){
            int mid1 = low + (high - low)/2;
            int mid2 = left - mid1;
            int l1 = INT_MIN;
            int l2 = INT_MIN;
            int r1 = INT_MAX;
            int r2 = INT_MAX;
            if(mid1 < n) r1 = nums1[mid1];
            if(mid2 < m) r2 = nums2[mid2];
            if(mid1 - 1 >= 0)l1 = nums1[mid1 - 1];
            if(mid2 - 1 >= 0)l2 = nums2[mid2 - 1 ];

            if(l1 <= r2 && l2 <= r1){
               return max(l1,l2);
            }else if(l1 > r2){
                high = mid1 - 1;
            }else{
                low = mid1 + 1;
            }
        }
        return -1;
    }
