class Solution {
    int solve(vector<vector<int>>& triangle, int i, int j, int m, int n, vector<vector<int>>& dp){
        if( i == m-1)return triangle[i][j];
        if(dp[i][j] != -1)return dp[i][j];
        int down = solve(triangle, i+1, j, m, n, dp);
        int diag = solve(triangle, i+1, j+1, m, n, dp);
        return dp[i][j] =  min(down, diag) + triangle[i][j];
    }
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        int m = triangle.size();
        int n = triangle.back().size();
        vector<vector<int>>dp(m, vector<int>(n, 0));
        for(int i = 0; i<n;i++){
            dp[m-1][i] = triangle[m-1][i];
        }
        for(int i = m-2; i >= 0; i--){
            for(int j = i; j >= 0; j--){
                int down = dp[i+1][j];
                int diag = dp[i+1][j+1];
                dp[i][j] =  min(down, diag) + triangle[i][j];
            }
        }
        return dp[0][0];
    }
};
