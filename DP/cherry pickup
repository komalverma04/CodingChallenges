recursion for fixed staring point and variable ending point: recursion starts from 1st row
recursion:
3^n * 3^n = TC
SC: Aux Sack
Memoisation:  int util(int i, int j1, int j2, vector<vector<int>>& grid, int n, int m, vector<vector<vector<int>>>&dp){
        if(i >= n || j1<0 || j2<0 || j1 >=m || j2 >= m)return -1e8;
        if(i == n-1){
            if( j1 == j2)return grid[i][j1];
            else{
                return grid[i][j1] + grid[i][j2];
            }
        }
        if(dp[i][j1][j2] != -1)return dp[i][j1][j2];
        int maxi = -1e8;
        for(int dj1 = -1; dj1 <= 1; dj1++){
            for(int dj2 = -1; dj2 <= 1; dj2++){
                if(j1 == j2){
                    maxi = max(maxi, grid[i][j1] + util(i+1, j1 + dj1, j2 + dj2, grid, n, m, dp));
                }else{
                    maxi = max(maxi, grid[i][j1] + grid[i][j2] + util(i+1, j1 + dj1, j2 + dj2, grid, n, m, dp));
                }
            }
        }
        return dp[i][j1][j2] = maxi;
    }
  public:
    int solve(int n, int m, vector<vector<int>>& grid) {
    
        vector<vector<vector<int>>>dp(n, vector<vector<int>>(m, vector<int>(m,-1)));
        for()
       return util(0, 0, m-1, grid, n, m, dp);
    }
TC = n * m * m * 9
sc = n * m * m + Aux
  Tabulation:
int solve(int n, int m, vector<vector<int>>& grid) {
    
        vector<vector<vector<int>>>dp(n, vector<vector<int>>(m, vector<int>(m,0)));
        for(int j1 = 0; j1 <m;j1++){
            for(int j2 = 0; j2<m; j2++){
                 if( j1 == j2)dp[n-1][j1][j2] = grid[n-1][j1];
            else{
                dp[n-1][j1][j2] = grid[n-1][j1] + grid[n-1][j2];
            }
            }
        }
        
        for(int i = n-2; i>=0;i--){
            for(int j1 = m-1; j1 >= 0; j1--){
                for(int j2 = 0; j2 < m; j2++){
                    int maxi = -1e8;
                        for(int dj1 = -1; dj1 <= 1; dj1++){
                        for(int dj2 = -1; dj2 <= 1; dj2++){
                            int value = 0;
                        if(j1 == j2){
                       value =  grid[i][j1];
                        }else{
                        value = grid[i][j1] + grid[i][j2] ;
                        }
                        if(dj1+j1 < m && dj2 + j2 < m && dj2 + j2 >= 0 && dj1 + j1 >= 0)value += dp[i+1][dj1+j1][dj2+j2];
                        else{
                            value += -1e8;
                        }
                        maxi = max(maxi, value);
                        }
                        }
                         dp[i][j1][j2] = maxi;
                }
            }
        }
       return dp[0][0][m-1];
    }
