class Solution {
    int solve(int i, int target, vector<int>& coins, vector<vector<int>>& dp){
        if(i == 0){
            int rem = target % coins[0];
            if(rem == 0)return target/coins[0];
            return (int)1e9;
        }
        if(dp[i][target] != -1)return dp[i][target];
        int notTake = 0 + solve(i-1, target, coins, dp);
        int take = 1e9;
        if(coins[i] <= target) take = 1 + solve(i, target - coins[i], coins, dp);
        return dp[i][target] = min(take, notTake);
    }
public:
    int coinChange(vector<int>& coins, int amount) {
        int n = coins.size();
        vector<vector<int>>dp(n, vector<int>(amount + 1, 0));
        for(int i = 0; i<n;i++){
            dp[i][0] = 1;
        }
        for(int t = 0; t<= amount; t++){
            if(t % coins[0] == 0){
                dp[0][t] = t/coins[0];
            }else{
                dp[0][t] = 1e9;
            }
        }
        for(int i= 1; i<n; i++){
            for(int j = 0; j<= amount; j++){
                    int notTake = 0 + dp[i-1][j];
                    int take = 1e9;
                    if(coins[i] <= j) take = 1 + dp[i][j - coins[i]];
                    dp[i][j] = min(take, notTake);
            }
        }
        int ans = dp[n-1][amount];
        if(ans == 1e9)return -1;
        return ans;
    }
};
