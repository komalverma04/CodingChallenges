class Solution {
    int solve(vector<int>& nums){
          int n = nums.size();
        vector<int> dp(n, 0);
        
        dp[0] = nums[0];
        for(int i = 1; i<n; i++){
        int notTake = dp[i-1];
        int take = i-2 >= 0 ? dp[i-2] + nums[i] : nums[i];
         dp[i] = max(take, notTake);
        }
        return dp[n-1];
    }
public:
    int rob(vector<int>& nums) {
       vector<int>temp1, temp2;
       int n = nums.size();
       if(n == 1)return nums[0];
       for(int i = 0; i<n ; i++){
        if(i != 0){
            temp1.push_back(nums[i]);
        }
        if(i != n - 1){
            temp2.push_back(nums[i]);
        }
       }
    return max(solve(temp1), solve(temp2));
       
    }
};
