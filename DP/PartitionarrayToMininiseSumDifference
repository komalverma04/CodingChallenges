class Solution {
public:
    int minimumDifference(vector<int>& nums) {
        // tabulation method which uses dp fails here coz there could be negative sum too which we won't be able to represent through index, so we will use meet in the middle technique which uses bit masking to decide whether a element to be included or not and as we know bit are not affected by sign of the element
        int n = nums.size();
        int sum = 0;
        for(int i = 0; i<n;i++){
            sum += nums[i];
        }
        int N = n/2;
        vector<vector<int>> left(N+1), right(N+1);
        for(int mask = 0; mask < (1<<N); mask++){
            int ind = 0;
            int l_sum = 0;
            int r_sum = 0;
            for(int i = 0; i<N;i++){
                if(mask & (1 << i)){
                    ind++;
                    l_sum += nums[i];
                    r_sum += nums[i+N];
                }
            }
            left[ind].push_back(l_sum);
            right[ind].push_back(r_sum);
        }
        for(int i = 0; i<= N; i++){
             sort(right[i].begin(), right[i].end());
        }
        int res = INT_MAX;
     res = min(abs(sum - 2*left[N][0]), abs(sum - 2*right[N][0]));
        for(int i = 1; i<N;i++){
            for(auto a : left[i]){
                int b = (sum - 2*a)/2;
                // if we take 1 element from left array the we have to take N-1 eleement from right
                int ri = N-i;
                auto &v = right[ri];
                auto itr = lower_bound(v.begin(), v.end(), b);
                if(itr != v.end()){
                    res = min(res, abs((sum - 2*(a + (*itr)))));
                }
            }
        }
       return res;
    }
};
