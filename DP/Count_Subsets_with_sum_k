	public:
	int mod = (int)1e9+7;
	int solve(int i, int sum, int arr[], vector<vector<int>>& dp){
	   
	    if(i == 0){
	        if(arr[i] == 0 && sum == 0) return 2;
	        if(sum == 0 || arr[0] == sum ){
	            return 1;
	        }
	        return 0;
	    }
	    if(dp[i][sum] != -1){
	        return dp[i][sum];
	    }
	    int notTake = solve(i-1, sum, arr, dp);
	    int take = 0;
	    if(sum >= arr[i]) take = solve(i-1, sum - arr[i], arr, dp);
	    return dp[i][sum] = (take + notTake) % mod;
	}
	int perfectSum(int arr[], int n, int sum)
	{
      vector<vector<int>>dp(n, vector<int>(sum+1, 0));
      for(int i = 0; i < n; i++){
          dp[i][0] = 1;
      }
      if(arr[0] <= sum){
          dp[0][arr[0]] = 1;
      }
      if(arr[0]==0) dp[0][0]=2;
      for(int i = 1; i<n; i++){
          for(int j = 0; j<=sum; j++){
              int notTake = dp[i-1][j];
              int take = 0;
              if(j >= arr[i]){
                  take =  dp[i-1][j - arr[i]];
              }
              dp[i][j] = (take + notTake) % mod;
          }
      }
      return dp[n-1][sum];
    
	}
