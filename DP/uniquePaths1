class Solution {
    int countPaths(int m, int n, int i, int j, vector<vector<int>>& visited, vector<vector<int>>& dp){
        if(i < 0 || j < 0 || i >= m || j >= n || visited[i][j] == 1){
            return 0;
        }
        if(i == 0 && j == 0)return 1;
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        visited[i][j] = 1;
        int cnt1 = countPaths(m, n, i, j-1, visited, dp);
        int cnt2 = countPaths(m, n, i-1, j, visited, dp);
        visited[i][j] = 0;
        return dp[i][j] = cnt1 + cnt2;

    }
public:
    int uniquePaths(int m, int n) {
       
        vector<vector<int>>dp(m, vector<int>(n, 0));
        dp[0][0] = 1;
        
        for(int i = 0; i<m; i++){
            for(int j = 0; j<n;j++){
                if(i == 0 || j == 0){
                    dp[i][j] = 1;
                    
                }else{
                        int cnt1 = dp[i][j-1];
                        int cnt2 = dp[i-1][j];
                        dp[i][j] = cnt1 + cnt2;
                
                }
                
            }
            
        }
        return dp[m-1][n-1];
    }
};
