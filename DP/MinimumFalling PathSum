class Solution {
    int solve(vector<vector<int>>& matrix, int i, int j, int n, vector<vector<int>>& dp){
        if(i<0 || j<0 || j >= n)return INT_MAX;
        if(i == 0)return matrix[i][j];
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        int leftdiag = solve(matrix, i-1, j-1, n, dp);
        int up = solve(matrix, i-1, j, n, dp);
        int rightdiag = solve(matrix, i-1, j+1, n, dp);
        return dp[i][j] = min(leftdiag, min(up, rightdiag)) + matrix[i][j];
    }
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size();
        int mini = INT_MAX;
        vector<vector<int>>dp(m, vector<int>(n, 0));
        for(int i = 0; i<n;i++){
            dp[0][i] = matrix[0][i];
        }
        for(int i = 1; i<m;i++){
            for(int j = 0; j<n;j++){
                int leftdiag = j-1 >= 0 ? dp[i-1][j-1] : INT_MAX;
                int up = dp[i-1][j];
                int rightdiag = j+1 < n ? dp[i-1][j+1] : INT_MAX;
               dp[i][j] = min(leftdiag, min(up, rightdiag)) + matrix[i][j];
            }
        }
        for(int i = 0; i<n; i++){
            int sum = dp[m-1][i];
            mini = min(mini, sum);
        }
        return mini;
    }
};
