class Solution{
    int solve(int i, int W, int val[], int wt[], vector<vector<int>>& dp){
        if(i < 0 || W == 0)return 0;
        if(dp[i][W] != -1)return dp[i][W];
       int notTake = 0+ solve(i-1, W, val, wt, dp);
       int take = -1e8;
       if(W >= wt[i]){
           take = val[i] + solve(i, W-wt[i], val, wt, dp);
       }
       return dp[i][W] = max(take, notTake);
    }
public:
    int knapSack(int N, int W, int val[], int wt[])
    {
        vector<vector<int>> dp(N, vector<int>(W+1, 0));
        for(int j = 0; j<=W; j++){
            dp[0][j] = (j/wt[0])*val[0];
        }
        for(int i = 1; i<N;i++){
            for(int j = 1; j<=W; j++){
                        int notTake = 0;
                        if(i-1 >= 0) notTake = dp[i-1][j];
                        int take = -1e8;
                        if(j >= wt[i]){
                        take = val[i] + dp[i][j-wt[i]];
                        }
                        dp[i][j] = max(take, notTake);
            }
        }
       return dp[N-1][W];
    }
