class Solution {
    int solve(vector<vector<int>>& grid, int m, int n, int i, int j, vector<vector<int>>& dp){
        if(i == 0 && j == 0)return grid[0][0];
        if( i < 0 || j<0)return INT_MAX;
        if(dp[i][j] != -1)return dp[i][j];
        int left = solve(grid, m, n, i, j-1, dp);
        int right =  solve(grid, m, n, i-1, j, dp);
        return dp[i][j] =  min(left, right) + grid[i][j];
    }
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>>dp(m, vector<int>(n, 0));
        dp[0][0] = grid[0][0];
        for(int i = 1; i<m;i++){
            dp[i][0] = dp[i-1][0] + grid[i][0];
        }
        for(int i = 1; i<n;i++){
            dp[0][i] = dp[0][i-1] + grid[0][i];
        }
        for( int i = 1; i<m; i++){
            for(int j = 1; j<n;j++){
                    int left = dp[i][j-1];
                    int right =  dp[i-1][j];
                     dp[i][j] =  min(left, right) + grid[i][j];
            }
        }
        return dp[m-1][n-1];
    }
};
