 bool solve(vector<int>arr, int sum, int i, vector<vector<int>>& dp){
        
        if(sum == 0){
            return true;
        }
        if(i == 0){
            return arr[i] == sum;
        }
       if(dp[i][sum] != -1){
           return dp[i][sum];
       }
        bool nottake = solve(arr, sum, i-1, dp);
        
        bool take = false;
        if(sum >= arr[i])take = solve(arr, sum-arr[i], i-1, dp);
        return dp[i][sum] = take || nottake;
        }
public:
    bool isSubsetSum(vector<int>arr, int sum){
      int n = arr.size();
      int cursum = 0;
     vector<vector<int>>dp(n, vector<int>(sum+1, -1));
      return solve(arr, sum,n-1, dp);
    }

bool isSubsetSum(vector<int>arr, int sum){
      int n = arr.size();
      
     vector<vector<int>>dp(n+1, vector<int>(sum+1, 0));
     for(int i = 0; i<n;i++){
         dp[i][0] = 1;
     }
     if(arr[0] <= sum)dp[0][arr[0]] = 1;
     for(int i = 1; i < n;i++){
         for(int j = 1; j <= sum; j++){
                bool nottake = dp[i-1][j];
                
                bool take = false;
                if(j >= arr[i])take = dp[i-1][j - arr[i]];
                dp[i][j] = take || nottake;
         }
     }
      return dp[n-1][sum];
    }
