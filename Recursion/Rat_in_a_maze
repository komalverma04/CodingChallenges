
class Solution{
    void solve( vector<string>& ans, vector<vector<int>> &m, int n, string output, int i, int j, vector<vector<int>>& visited){
        if(i == n-1 && j == n-1){
            ans.push_back(output);
            return;
        }
        if(i>=n || j >= n || i < 0 || j < 0){
            return;
        }
        if(i - 1 >=0 && m[i-1][j] == 1 && visited[i-1][j] == 0){
            output += 'U';
            visited[i-1][j] = 1;
            solve(ans, m, n, output, i-1,j, visited);
            visited[i-1][j] = 0;
            output.pop_back();
        }
        if(j + 1 < n && m[i][j+1] == 1 && visited[i][j+1] == 0){
            output += 'R';
            visited[i][j+1] = 1;
            solve(ans, m, n, output, i,j + 1, visited);
            visited[i][j+1] = 0;
            output.pop_back();
        }
        if(i + 1 < n && m[i+1][j] == 1 &&  visited[i+1][j] == 0){
            output += 'D';
            visited[i+1][j] = 1;
            solve(ans, m, n, output, i+1,j, visited);
            visited[i+1][j] = 0;
            output.pop_back();
        }
        if(j - 1 >=0 && m[i][j-1] == 1 && visited[i][j-1] == 0){
            output += 'L';
            visited[i][j-1] = 1;
            solve(ans, m, n, output, i,j-1, visited);
            output.pop_back();
            visited[i][j-1] = 0;
        }
    }
    public:
    vector<string> findPath(vector<vector<int>> &m, int n) {
        vector<vector<int>> visited(n, vector<int>(n,0));
        visited[0][0] = 1;
        vector<string> ans;
        string output = "";
        if(m[0][0] == 0){
            return ans;
        }
        solve(ans, m,n, output,0 ,0, visited);
        return ans;
        
    }
};

T.C.: O(4^n^2)
SC: O(n^2)
