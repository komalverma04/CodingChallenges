class Solution {
    vector<int>temp;
    void merge(vector<int>& nums, int low, int mid, int high,  long long int& count){
        int left = low;
        int right = mid+1;
        temp.clear();
        
        while(left <= mid && right <= high){
            if(nums[left] > nums[right]){
                temp.push_back(nums[right]);
              count += (mid - left + 1);
                right++;
               
            }else{
                temp.push_back(nums[left]);
                left++;
            }
        }
        while(left <= mid){
            temp.push_back(nums[left]);
                left++;
        }
        while(right <= high){
             temp.push_back(nums[right]);
                right++;
        }
        for(int i = low; i <= high; i++){
            nums[i] = temp[i - low];
        }
    }
    void merge_sort(vector<int>& nums, int low, int high,  long long int& count){
        if(low >= high){
            return;
        }
        int mid = low + (high - low) / 2;
        merge_sort(nums, low, mid, count);
        merge_sort(nums, mid+1, high, count);
        merge(nums, low, mid, high, count);
    }
public:
    bool isIdealPermutation(vector<int>& nums) {
        long long int count = 0;
        int local = 0;
        int l = 0;
        int n = nums.size();
        while( l < n-1 ){
            if(nums[l] > nums[l+1]){
                local++;
            }
            l++;
        }
        
         merge_sort(nums, 0, nums.size()-1, count);
        
        if(local == count){
            return true;
        }
        return false;
    }
};


O(nlogn)
