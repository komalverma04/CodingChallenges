class Solution {
public:
    int candy(vector<int>& ratings) {
        int n = ratings.size();
        vector<int>left(n,0);
        int sum = 0;
        left[0] = 1;
        for(int i = 1; i<n; i++){
            if(ratings[i] > ratings[i-1]){
                left[i] = left[i-1] + 1;
            }else{
                left[i] = 1;
            }
        }
        sum = max(1, left[n-1]);
        int right = 1;
        for(int i = n-2; i>=0; i--){
            int cur;
            if(ratings[i] > ratings[i+1]){
                cur = right+1;
                right = cur;
            }else{
                cur = 1;
                right = 1;
            }
            sum += max(left[i], cur);
        }
        return sum;
    }
};




Optimal solution:-
class Solution {
public:
    int candy(vector<int>& ratings) {
        int sum = 1;
        int i = 1;
        int n = ratings.size();
        int peak = 0;
        int down = 0;
        while(i < n){
             int peak = 1;
        int down = 1;
            while(i<n && ratings[i] > ratings[i-1]){
                peak += 1;
                sum += peak;
                i++;
            }
            while(i<n && ratings[i] < ratings[i-1]){
                sum += down;
                down += 1;
                i++;
            }
            while(i < n && ratings[i] == ratings[i-1]){
                sum += 1;i++;
            }
            if(down > peak) sum += (down - peak);
        }
        return sum;
    }
};
