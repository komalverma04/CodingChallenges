class Solution {
public:
void dfs(int i, int j, vector<vector<int>>& vis, vector<vector<int>>& grid){
    int m = grid.size();
        int n = grid[0].size();
    if( i<0 || i >= m || j<0 || j >= n || grid[i][j] == 0 || vis[i][j] == 1){
        return;
    }
    vis[i][j] = 1;
    dfs(i-1,j,vis, grid);
    dfs(i,j+1,vis, grid);
    dfs(i+1,j,vis, grid);
    dfs(i,j-1,vis, grid);

}
int solve(vector<vector<int>>& grid){
    int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>>vis(m, vector<int>(n, 0));
        int islands = 0;
        for(int i = 0; i<m;i++){
            for(int j = 0; j<n;j++){
                if(grid[i][j] == 1 && !vis[i][j]){
                    dfs(i,j,vis,grid);
                    islands++;
                }
            }
        }
        return islands;
}
    int minDays(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
       int islands = solve(grid);
        if(islands > 1 || islands == 0){
            return 0;
        }else{
            for(int i = 0; i<m;i++){
                for(int j = 0; j<n;j++){
                    if(grid[i][j] == 1){
                        grid[i][j] = 0;
                        islands = solve(grid);
                        if(islands > 1 || islands == 0){
                            return 1;
                        }

                        grid[i][j] = 1;
                    }
                }
            }
        }
        return 2;
    }
};
