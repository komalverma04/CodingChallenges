#include <bits/stdc++.h> 

class Node{
    public:
    Node* links[26];
    int endWith = 0;
    int prefix = 0;

    bool containsKey(char ch){
        return links[ch - 'a'] != NULL;
    }
    void put(char ch, Node* node){
        links[ch - 'a'] = node;
    }
    Node* get(char ch){
        return links[ch-'a'];
    }
    void incEnd(){
        endWith++;
    }
    void incprefix(){
        prefix++;
    }
    void deccEnd(){
        endWith--;
    }
    void decprefix(){
        prefix--;
    }
    int getPrefix(){
        return prefix;
    }
    int getEndsWith(){
        return endWith;
    }
};

class Trie{

    public:
    Node* root;
    Trie(){
       root = new Node();
    }

    void insert(string &word){
        Node* node = root;
        for(int i = 0; i<word.size(); i++){
            if(!node->containsKey(word[i])){
                    node->put(word[i], new Node());
            }
            node = node->get(word[i]);
            node->incprefix();
        }
        node->incEnd();
    }

    int countWordsEqualTo(string &word){
        Node* node = root;
        for(int i = 0; i<word.size(); i++){
            if(!node->containsKey(word[i])){
                    return 0;
            }
            node = node->get(word[i]);
        }
       return node->getEndsWith();
    }

    int countWordsStartingWith(string &word){
       Node* node = root;
        for(int i = 0; i<word.size(); i++){
            if(!node->containsKey(word[i])){
                    return 0;
            }
            node = node->get(word[i]);
        }
       return node->getPrefix();
    }

    void erase(string &word){
        Node* node = root;
        for(int i = 0; i<word.size(); i++){
            if(!node->containsKey(word[i])){
                    return;
            }
            node = node->get(word[i]);
            node->decprefix();
        }
        node->deccEnd();
    }
};
